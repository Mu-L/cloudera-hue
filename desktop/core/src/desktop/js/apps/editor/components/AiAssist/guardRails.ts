/*
  Licensed to Cloudera, Inc. under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  Cloudera, Inc. licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

import sqlStatementsParser, { ParsedSqlStatement } from '../../../../parse/sqlStatementsParser';

export enum GuardrailAlertType {
  UNSAFE_SQL = 'UNSAFE_SQL',
  SEMANTIC_ERROR = 'SEMANTIC_ERROR',
  SQL_ERROR = 'SQL_ERROR',
  INVALID_AI_RESPONSE = 'INVALID_AI_RESPONSE'
}

// Warning messages
const lossAlterWarning = `To prevent accidental loss or altering of data as a result of 
interacting with the AI assistant, you must confirm that you understand what this query 
does before executing it in the editor.`;
const resourceIntensiveWarning = `The SQL statement is flagged as potentially dangerous.
Please read the additional information and confirm that you understand what 
this query does before you execute it in the editor.`;
const cteWarning = `CTE statements generated by the AI assistant can potentially contain 
unsafe sub statements. ${lossAlterWarning}`;
const deleteWarning = (
  keyword: string
) => `SQL statements starting with ${keyword} are not considered safe to execute because 
they delete data. To prevent accidental data loss as a result of interacting with the AI 
assistant, you must confirm that you understand what this query does before executing it 
in the editor.`;
const alterWarning = (
  keyword: string
) => `SQL statements starting with ${keyword} are not considered safe to execute because 
they modify data. To prevent accidental data loss as a result of interacting with the AI 
assistant, you must confirm that you understand what this query does before executing it 
in the editor.`;
const defaultKeywordWarning = (
  keyword: string
) => `SQL statements starting with ${keyword} are not considered safe 
to execute. ${lossAlterWarning}`;
const failedToParseWarning = `Unable to parse the query. ${lossAlterWarning}`;

// Info messages
const invalidAiResponseMsg = `The AI responded in an unexpected way and the result could not be handled by Hue.
Modify your input and try again.`;
const semanticErrorMsg = `The AI assistant is unable to understand your request. Try using a different set of words or
natural query language phrases, the same way you would ask a human.`;
const sqlErrorMsg = `The AI assistant is unable to understand your request. Make sure you are using SQL syntax in the query.`;

function checkAllPropertiesNullOrEmpty(obj: any): boolean {
  for (const key in obj) {
    if (obj[key] !== null && obj[key] !== '') {
      return false;
    }
  }
  return true;
}

function getFirstKeywordsInUppercase(sqlStatement: string) {
  const parsed: ParsedSqlStatement[] = sqlStatementsParser.parse(sqlStatement);
  const firstTokens = parsed.map(parsedObj => parsedObj?.firstToken?.toUpperCase());
  return firstTokens.filter(token => token !== undefined);
}

function validateFirstKeyword(keyword: string): { unsafe: boolean; details?: string } {
  let unsafe = true;
  let details;

  switch (keyword) {
    case 'SELECT':
    case 'DESCRIBE':
    case 'SHOW':
      unsafe = false;
      break;
    case 'WITH':
      details = cteWarning;
      break;
    case 'DELETE':
    case 'TRUNCATE':
    case 'DROP':
      details = deleteWarning(keyword);
      break;
    case 'INSERT':
    case 'UPDATE':
    case 'REPLACE':
    case 'LOAD':
    case 'ALTER':
    case 'MERGE':
    case 'UPSERT':
      details = alterWarning(keyword);
      break;
    default:
      details = defaultKeywordWarning(keyword);
      break;
  }
  return { unsafe, details };
}

export function hasUnsafeKeywords(sqlStatement: string): { unsafe: boolean; details?: string } {
  try {
    const firstKeywords = getFirstKeywordsInUppercase(sqlStatement);
    const onlyContainsComment = sqlStatement && firstKeywords.length === 0;

    if (!sqlStatement || onlyContainsComment) {
      return { unsafe: false };
    }

    const validations = firstKeywords.map(validateFirstKeyword);
    const invalidStatement = validations.find(validation => validation.unsafe === true);

    return invalidStatement || { unsafe: false };
  } catch (e) {
    console.error(e);
    return {
      unsafe: true,
      details: failedToParseWarning
    };
  }
}

/**
 * This function is used to wrap the AI assistant calls to the LLM in order to add guardrails.
 * It checks for unsafe SQL statements and LLM specific errots and attaches a GuardrailAlert
 * object to the return if any are found.
 */
export interface GuardrailAlert {
  type: GuardrailAlertType;
  title: string;
  nql?: string;
  msg?: string;
  aiMsg?: string;
}

export function withGuardrails(functionToGuard: (...args: any[]) => Promise<any>) {
  return async (...args: any[]) => {
    const result = await functionToGuard(...args);
    const { nql } = args[0];
    const titleUnsafeSqlType = 'Potentially unsafe SQL statement';

    const invalidResponse = checkAllPropertiesNullOrEmpty(result);

    if (invalidResponse) {
      result.guardrailAlert = {
        type: GuardrailAlertType.INVALID_AI_RESPONSE,
        title: 'The AI returned an invalid response',
        msg: invalidAiResponseMsg
      };
    } else if (result.semanticerror) {
      result.guardrailAlert = {
        type: GuardrailAlertType.SEMANTIC_ERROR,
        title: 'The input could not be understood',
        nql,
        msg: semanticErrorMsg,
        aiMsg: result.semanticerror
      };
    } else if (result.sqlerror) {
      result.guardrailAlert = {
        type: GuardrailAlertType.SQL_ERROR,
        title: 'The provided SQL could not be understood',
        msg: sqlErrorMsg,
        aiMsg: result.sqlerror
      };
    } else if (result.warning) {
      const keywordsAreSafe = !hasUnsafeKeywords(result.sql).unsafe;
      const msg = keywordsAreSafe ? resourceIntensiveWarning : lossAlterWarning;

      result.guardrailAlert = {
        type: GuardrailAlertType.UNSAFE_SQL,
        title: titleUnsafeSqlType,
        nql,
        msg,
        aiMsg: result.warning
      };
    } else {
      const { unsafe, details } = hasUnsafeKeywords(result.sql);
      if (unsafe) {
        result.guardrailAlert = {
          type: GuardrailAlertType.UNSAFE_SQL,
          title: titleUnsafeSqlType,
          nql,
          msg: details
        };
      }
    }
    return result;
  };
}
